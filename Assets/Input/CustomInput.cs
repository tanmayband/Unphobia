//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Ghost"",
            ""id"": ""d06e92c0-118c-42e1-ac11-c200bf6a3102"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b50bed56-62bc-4468-9ea8-bb96f3e794a7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scare"",
                    ""type"": ""Button"",
                    ""id"": ""e40a325f-f74d-426e-b839-db9a351a4ced"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""7e2e58c1-080c-4e55-be57-7e11209d0317"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d4e87223-1e99-4c03-b443-ffd2569cfeea"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2ccaf84e-59e5-4eca-ac09-e907c3c5febb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9fa4ebc7-5edf-473b-8846-18e32b1ca62a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""27678741-483c-4ab1-951c-d10fc2d6a5ee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""98e4c5fa-d0fa-472c-8d1a-ac8fc5b6cb28"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bbdc941c-27ed-4c8f-8d07-26c5075ac64e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb60c8b2-d255-4801-baa6-35748afc61dc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Admin"",
            ""id"": ""54c74a71-1c7a-428e-bfca-e59a9961b768"",
            ""actions"": [
                {
                    ""name"": ""RestartLevel"",
                    ""type"": ""Button"",
                    ""id"": ""9dda6ce1-b9a3-42d0-ae6d-4bbf0216644f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseMenu"",
                    ""type"": ""Button"",
                    ""id"": ""a3002c8b-1750-432f-a91c-6218837705c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""327f3413-6d0d-41fb-88f5-3cc95cb48fe6"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40ebcaac-fc3d-42c8-b082-7ad33d3f00a2"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ghost
        m_Ghost = asset.FindActionMap("Ghost", throwIfNotFound: true);
        m_Ghost_Movement = m_Ghost.FindAction("Movement", throwIfNotFound: true);
        m_Ghost_Scare = m_Ghost.FindAction("Scare", throwIfNotFound: true);
        m_Ghost_Interact = m_Ghost.FindAction("Interact", throwIfNotFound: true);
        // Admin
        m_Admin = asset.FindActionMap("Admin", throwIfNotFound: true);
        m_Admin_RestartLevel = m_Admin.FindAction("RestartLevel", throwIfNotFound: true);
        m_Admin_PauseMenu = m_Admin.FindAction("PauseMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ghost
    private readonly InputActionMap m_Ghost;
    private List<IGhostActions> m_GhostActionsCallbackInterfaces = new List<IGhostActions>();
    private readonly InputAction m_Ghost_Movement;
    private readonly InputAction m_Ghost_Scare;
    private readonly InputAction m_Ghost_Interact;
    public struct GhostActions
    {
        private @CustomInput m_Wrapper;
        public GhostActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Ghost_Movement;
        public InputAction @Scare => m_Wrapper.m_Ghost_Scare;
        public InputAction @Interact => m_Wrapper.m_Ghost_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Ghost; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GhostActions set) { return set.Get(); }
        public void AddCallbacks(IGhostActions instance)
        {
            if (instance == null || m_Wrapper.m_GhostActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GhostActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Scare.started += instance.OnScare;
            @Scare.performed += instance.OnScare;
            @Scare.canceled += instance.OnScare;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IGhostActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Scare.started -= instance.OnScare;
            @Scare.performed -= instance.OnScare;
            @Scare.canceled -= instance.OnScare;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IGhostActions instance)
        {
            if (m_Wrapper.m_GhostActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGhostActions instance)
        {
            foreach (var item in m_Wrapper.m_GhostActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GhostActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GhostActions @Ghost => new GhostActions(this);

    // Admin
    private readonly InputActionMap m_Admin;
    private List<IAdminActions> m_AdminActionsCallbackInterfaces = new List<IAdminActions>();
    private readonly InputAction m_Admin_RestartLevel;
    private readonly InputAction m_Admin_PauseMenu;
    public struct AdminActions
    {
        private @CustomInput m_Wrapper;
        public AdminActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RestartLevel => m_Wrapper.m_Admin_RestartLevel;
        public InputAction @PauseMenu => m_Wrapper.m_Admin_PauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_Admin; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AdminActions set) { return set.Get(); }
        public void AddCallbacks(IAdminActions instance)
        {
            if (instance == null || m_Wrapper.m_AdminActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AdminActionsCallbackInterfaces.Add(instance);
            @RestartLevel.started += instance.OnRestartLevel;
            @RestartLevel.performed += instance.OnRestartLevel;
            @RestartLevel.canceled += instance.OnRestartLevel;
            @PauseMenu.started += instance.OnPauseMenu;
            @PauseMenu.performed += instance.OnPauseMenu;
            @PauseMenu.canceled += instance.OnPauseMenu;
        }

        private void UnregisterCallbacks(IAdminActions instance)
        {
            @RestartLevel.started -= instance.OnRestartLevel;
            @RestartLevel.performed -= instance.OnRestartLevel;
            @RestartLevel.canceled -= instance.OnRestartLevel;
            @PauseMenu.started -= instance.OnPauseMenu;
            @PauseMenu.performed -= instance.OnPauseMenu;
            @PauseMenu.canceled -= instance.OnPauseMenu;
        }

        public void RemoveCallbacks(IAdminActions instance)
        {
            if (m_Wrapper.m_AdminActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAdminActions instance)
        {
            foreach (var item in m_Wrapper.m_AdminActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AdminActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AdminActions @Admin => new AdminActions(this);
    public interface IGhostActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnScare(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IAdminActions
    {
        void OnRestartLevel(InputAction.CallbackContext context);
        void OnPauseMenu(InputAction.CallbackContext context);
    }
}
